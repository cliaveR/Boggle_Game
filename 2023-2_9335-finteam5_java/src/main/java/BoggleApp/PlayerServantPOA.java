package BoggleApp;


/**
* BoggleApp/PlayerServantPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from boggle.idl
* Thursday, May 16, 2024 3:05:57 PM SGT
*/

public abstract class PlayerServantPOA extends org.omg.PortableServer.Servant
 implements BoggleApp.PlayerServantOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("logInToGame", new java.lang.Integer (0));
    _methods.put ("getLeaderBoard", new java.lang.Integer (1));
    _methods.put ("getWaitingTime", new java.lang.Integer (2));
    _methods.put ("startGame", new java.lang.Integer (3));
    _methods.put ("getRoundTime", new java.lang.Integer (4));
    _methods.put ("startRound", new java.lang.Integer (5));
    _methods.put ("getLetterSet", new java.lang.Integer (6));
    _methods.put ("checkWord", new java.lang.Integer (7));
    _methods.put ("getRoundWinner", new java.lang.Integer (8));
    _methods.put ("getGameWinner", new java.lang.Integer (9));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {
       case 0:  // BoggleApp/PlayerServant/logInToGame
       {
         try {
           String username = in.read_string ();
           String password = in.read_string ();
           int $result = (int)0;
           $result = this.logInToGame (username, password);
           out = $rh.createReply();
           out.write_long ($result);
         } catch (BoggleApp.NoUserFoundException $ex) {
           out = $rh.createExceptionReply ();
           BoggleApp.NoUserFoundExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 1:  // BoggleApp/PlayerServant/getLeaderBoard
       {
         BoggleApp.Player $result[] = null;
         $result = this.getLeaderBoard ();
         out = $rh.createReply();
         BoggleApp.PlayerListHelper.write (out, $result);
         break;
       }

       case 2:  // BoggleApp/PlayerServant/getWaitingTime
       {
         int $result = (int)0;
         $result = this.getWaitingTime ();
         out = $rh.createReply();
         out.write_long ($result);
         break;
       }

       case 3:  // BoggleApp/PlayerServant/startGame
       {
         int playerID = in.read_long ();
         int $result = (int)0;
         $result = this.startGame (playerID);
         out = $rh.createReply();
         out.write_long ($result);
         break;
       }

       case 4:  // BoggleApp/PlayerServant/getRoundTime
       {
         int gameID = in.read_long ();
         int $result = (int)0;
         $result = this.getRoundTime (gameID);
         out = $rh.createReply();
         out.write_long ($result);
         break;
       }

       case 5:  // BoggleApp/PlayerServant/startRound
       {
         int gameID = in.read_long ();
         int round = in.read_long ();
         int $result = (int)0;
         $result = this.startRound (gameID, round);
         out = $rh.createReply();
         out.write_long ($result);
         break;
       }

       case 6:  // BoggleApp/PlayerServant/getLetterSet
       {
         int gameID = in.read_long ();
         int roundID = in.read_long ();
         char $result[] = null;
         $result = this.getLetterSet (gameID, roundID);
         out = $rh.createReply();
         BoggleApp.LetterListHelper.write (out, $result);
         break;
       }

       case 7:  // BoggleApp/PlayerServant/checkWord
       {
         try {
           String word = in.read_string ();
           int playerID = in.read_long ();
           int roundID = in.read_long ();
           boolean $result = false;
           $result = this.checkWord (word, playerID, roundID);
           out = $rh.createReply();
           out.write_boolean ($result);
         } catch (BoggleApp.WordNotFoundException $ex) {
           out = $rh.createExceptionReply ();
           BoggleApp.WordNotFoundExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 8:  // BoggleApp/PlayerServant/getRoundWinner
       {
         int roundID = in.read_long ();
         String $result = null;
         $result = this.getRoundWinner (roundID);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 9:  // BoggleApp/PlayerServant/getGameWinner
       {
         int gameID = in.read_long ();
         String $result = null;
         $result = this.getGameWinner (gameID);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:BoggleApp/PlayerServant:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public PlayerServant _this() 
  {
    return PlayerServantHelper.narrow(
    super._this_object());
  }

  public PlayerServant _this(org.omg.CORBA.ORB orb) 
  {
    return PlayerServantHelper.narrow(
    super._this_object(orb));
  }


} // class PlayerServantPOA
